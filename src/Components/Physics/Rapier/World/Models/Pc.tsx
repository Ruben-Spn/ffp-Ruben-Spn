/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 pc.glb -t 
*/

import * as THREE from "three";
import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { is } from "@react-three/fiber/dist/declarations/src/core/utils";
import { ThreeEvent } from "@react-three/fiber";
import {
  cursorActiveHandler,
  cursorInactiveHandler,
} from "Components/UserInterface/CursorOverlay";

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh;
    Cube_1: THREE.Mesh;
    Cube_2: THREE.Mesh;
    Cube_3: THREE.Mesh;
    Cube_4: THREE.Mesh;
    Cube_5: THREE.Mesh;
    button: THREE.Mesh;
    feet: THREE.Mesh;
    front: THREE.Mesh;
  };
  materials: {
    ["case"]: THREE.MeshStandardMaterial;
    light: THREE.MeshStandardMaterial;
    wood: THREE.MeshStandardMaterial;
    off: THREE.MeshStandardMaterial;
    caseDark: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const [isOn, setIsOn] = useState(false);

  const { nodes, materials } = useGLTF(
    `${process.env.PUBLIC_URL}/Models/pc.glb`
  ) as GLTFResult;
  const soundEffect = new Audio(
    `${process.env.PUBLIC_URL}/audio/computerStart.mp3`
  );
  const clickHandler = (event: ThreeEvent<MouseEvent>) => {
    if (!isOn) {
      soundEffect.play();
      setIsOn(true);
      window.localStorage.setItem("Pc", "on");
      window.dispatchEvent(new Event("storage"));
    } else {
      setIsOn(false);
      window.localStorage.setItem("Pc", "off");
      window.dispatchEvent(new Event("storage"));
    }
  };

  return (
    <group
      {...props}
      dispose={null}
      scale={0.66}
      position={[-4.4, 0, 5]}
      rotation={[0, Math.PI / 2, 0]}
      onPointerEnter={cursorActiveHandler}
      onPointerLeave={cursorInactiveHandler}
      onPointerOut={cursorInactiveHandler}
      onPointerOver={cursorActiveHandler}
    >
      <group position={[0, 1.1, 0]} onClick={clickHandler}>
        <mesh geometry={nodes.Cube.geometry} material={materials["case"]} />
        <mesh geometry={nodes.Cube_1.geometry} material={materials.light} />
        <mesh geometry={nodes.Cube_2.geometry} material={materials.wood} />
        <mesh
          geometry={nodes.Cube_3.geometry}
          material={isOn ? materials.light : materials.off}
        />
        <mesh geometry={nodes.Cube_4.geometry} material={materials.caseDark} />
        <mesh geometry={nodes.Cube_5.geometry} material={materials.caseDark} />
      </group>
      <mesh
        geometry={nodes.button.geometry}
        material={nodes.button.material}
        position={[0.956, 2.094, -0.316]}
        scale={[0.022, 0.007, 0.022]}
        visible={false}
      />
      <mesh
        geometry={nodes.feet.geometry}
        material={nodes.feet.material}
        position={[0.936, 0.077, 0.291]}
        scale={0.045}
      />
      <mesh
        geometry={nodes.front.geometry}
        material={nodes.front.material}
        position={[0.979, 1.1, 0.355]}
        visible={false}
      />
    </group>
  );
}

useGLTF.preload(`${process.env.PUBLIC_URL}/Models/pc.glb`);

export { Model as Pc };
