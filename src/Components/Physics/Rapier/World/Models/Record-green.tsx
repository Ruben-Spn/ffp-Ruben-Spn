/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 record-green.glb -t 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { ThreeEvent } from "@react-three/fiber";
import {
  cursorActiveHandler,
  cursorInactiveHandler,
} from "Components/UserInterface/CursorOverlay";
import swal from "sweetalert";

type GLTFResult = GLTF & {
  nodes: {
    ["case"]: THREE.Mesh;
    Circle001: THREE.Mesh;
    Circle001_1: THREE.Mesh;
    Circle001_2: THREE.Mesh;
  };
  materials: {
    ["case"]: THREE.MeshStandardMaterial;
    black: THREE.MeshStandardMaterial;
    red: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    `${process.env.PUBLIC_URL}/Models/record-green.glb`
  ) as GLTFResult;
  const clickHandler = (event: ThreeEvent<MouseEvent>) => {
    window.localStorage.setItem("song", "Around");
    window.dispatchEvent(new Event("storage"));

    swal("Now playing - FCK AROUND AND FIND OUT - Totalfraud");
  };
  return (
    <group
      {...props}
      dispose={null}
      scale={0.35}
      rotation={[0, -Math.PI / 2, 0]}
      position={[3.5, 3, -5.9]}
      onClick={clickHandler}
      onPointerEnter={cursorActiveHandler}
      onPointerLeave={cursorInactiveHandler}
      onPointerOut={cursorInactiveHandler}
      onPointerOver={cursorActiveHandler}
    >
      <mesh
        geometry={nodes["case"].geometry}
        material={materials["case"]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={2.005}
      />
      <group
        position={[0.017, 0, 0]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={1.819}
      >
        <mesh geometry={nodes.Circle001.geometry} material={materials.black} />
        <mesh geometry={nodes.Circle001_1.geometry} material={materials.red} />
        <mesh geometry={nodes.Circle001_2.geometry} material={materials.red} />
      </group>
    </group>
  );
}

useGLTF.preload(`${process.env.PUBLIC_URL}/Models/record-green.glb`);

export { Model as RecordGreen };
