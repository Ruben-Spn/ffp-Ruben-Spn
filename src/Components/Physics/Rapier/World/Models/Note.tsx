/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 note.glb -t 
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cylinder001: THREE.Mesh;
    Cylinder001_1: THREE.Mesh;
    Plane: THREE.Mesh;
    Text: THREE.Mesh;
    Text001: THREE.Mesh;
    Text002: THREE.Mesh;
    Text003: THREE.Mesh;
    Text004: THREE.Mesh;
    Cylinder002: THREE.Mesh;
    Cylinder002_1: THREE.Mesh;
    Cube: THREE.Mesh;
    Cube001: THREE.Mesh;
    Cube002: THREE.Mesh;
    Cube003: THREE.Mesh;
  };
  materials: {
    grey: THREE.MeshStandardMaterial;
    red: THREE.MeshStandardMaterial;
    paper: THREE.MeshStandardMaterial;
    ["grey.001"]: THREE.MeshStandardMaterial;
    ["red.001"]: THREE.MeshStandardMaterial;
    green: THREE.MeshStandardMaterial;
    ["green.001"]: THREE.MeshStandardMaterial;
    ["green.002"]: THREE.MeshStandardMaterial;
    ["green.003"]: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    `${process.env.PUBLIC_URL}/Models/note.glb`
  ) as GLTFResult;

  const [drink, setDrink] = useState(false);
  const [visit, setVisit] = useState(false);
  const [read, setRead] = useState(false);
  const [listen, setListen] = useState(false);

  useEffect(() => {
    window.addEventListener("storage", () => {
      setDrink(
        window.localStorage.getItem("Drink") === "complete" ? true : false
      );
      setVisit(
        window.localStorage.getItem("Visit") === "complete" ? true : false
      );
      setRead(
        window.localStorage.getItem("Read") === "complete" ? true : false
      );
      setListen(
        window.localStorage.getItem("Listen") === "complete" ? true : false
      );
    });
  }, []);

  return (
    <group {...props} dispose={null} scale={0.3} position={[-7.49, 2, 3]}>
      <group
        position={[0.188, 3.472, 0.383]}
        rotation={[2.301, 0.372, -1.564]}
        scale={[0.046, 0.007, 0.046]}
      >
        <mesh geometry={nodes.Cylinder001.geometry} material={materials.grey} />
        <mesh
          geometry={nodes.Cylinder001_1.geometry}
          material={materials.red}
        />
      </group>
      <mesh
        geometry={nodes.Plane.geometry}
        material={materials.paper}
        position={[-0.037, 2.662, -0.305]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[0.927, 1.191, 0.8]}
      />
      <mesh
        geometry={nodes.Text.geometry}
        material={materials.red}
        position={[0.03, 3.158, 0.459]}
        rotation={[Math.PI / 2, 0.076, -Math.PI / 2]}
        scale={0.107}
      />
      <mesh
        geometry={nodes.Text001.geometry}
        material={materials.red}
        position={[0.038, 2.975, 0.459]}
        rotation={[Math.PI / 2, 0.072, -Math.PI / 2]}
        scale={0.107}
      />
      <mesh
        geometry={nodes.Text002.geometry}
        material={materials.red}
        position={[0.052, 2.784, 0.459]}
        rotation={[Math.PI / 2, 0.076, -Math.PI / 2]}
        scale={0.107}
      />
      <mesh
        geometry={nodes.Text003.geometry}
        material={materials.red}
        position={[0.064, 2.579, 0.459]}
        rotation={[Math.PI / 2, 0.066, -Math.PI / 2]}
        scale={0.107}
      />
      <mesh
        geometry={nodes.Text004.geometry}
        material={materials.red}
        position={[0.097, 2.396, 0.459]}
        rotation={[Math.PI / 2, 0.177, -Math.PI / 2]}
        scale={0.107}
      />
      <group
        position={[0.188, 3.472, -0.978]}
        rotation={[0.999, 0.485, -1.423]}
        scale={[0.046, 0.007, 0.046]}
      >
        <mesh
          geometry={nodes.Cylinder002.geometry}
          material={materials["grey.001"]}
        />
        <mesh
          geometry={nodes.Cylinder002_1.geometry}
          material={materials["red.001"]}
        />
      </group>
      <mesh
        geometry={nodes.Cube.geometry}
        material={materials.green}
        position={[0.058, 3.18, -0.13]}
        scale={[0.008, 0.011, 0.558]}
        visible={listen}
      />
      <mesh
        geometry={nodes.Cube001.geometry}
        material={materials["green.001"]}
        position={[0.065, 3.001, -0.054]}
        scale={[0.008, 0.011, 0.518]}
        visible={read}
      />
      <mesh
        geometry={nodes.Cube002.geometry}
        material={materials["green.002"]}
        position={[0.071, 2.808, 0.1]}
        scale={[0.008, 0.011, 0.329]}
        visible={visit}
      />
      <mesh
        geometry={nodes.Cube003.geometry}
        material={materials["green.003"]}
        position={[0.077, 2.602, -0.144]}
        scale={[0.008, 0.011, 0.596]}
        visible={drink}
      />
    </group>
  );
}

useGLTF.preload(`${process.env.PUBLIC_URL}/Models/note.glb`);

export { Model as Note };
