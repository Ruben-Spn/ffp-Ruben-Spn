/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 can.glb -t 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import {
  cursorActiveHandler,
  cursorInactiveHandler,
} from "Components/UserInterface/CursorOverlay";
import { ThreeEvent } from "@react-three/fiber";
import swal from "sweetalert";

type GLTFResult = GLTF & {
  nodes: {
    Cylinder011: THREE.Mesh;
    Cylinder011_1: THREE.Mesh;
  };
  materials: {
    ["Material.027"]: THREE.MeshStandardMaterial;
    ["Material.028"]: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    `${process.env.PUBLIC_URL}/Models/can.glb`
  ) as GLTFResult;

  const music = new Audio(`${process.env.PUBLIC_URL}/audio/soda.mp3`);
  let count = 0;
  const playAudio = (event: ThreeEvent<MouseEvent>) => {
    event.stopPropagation();
    music.play();
    if (count >= 3) {
      swal("Refreshed you are!");
      window.localStorage.setItem("Drink", "complete");
      window.dispatchEvent(new Event("storage"));
    } else {
      count++;
    }
  };

  return (
    <group
      {...props}
      dispose={null}
      onClick={playAudio}
      onPointerEnter={cursorActiveHandler}
      onPointerLeave={cursorInactiveHandler}
      onPointerOut={cursorInactiveHandler}
      onPointerOver={cursorActiveHandler}
    >
      <group position={[-5, 1.8, 4.8]} scale={[0.12, 0.15, 0.12]}>
        <mesh
          geometry={nodes.Cylinder011.geometry}
          material={materials["Material.027"]}
        />
        <mesh
          geometry={nodes.Cylinder011_1.geometry}
          material={materials["Material.028"]}
        />
      </group>
    </group>
  );
}

useGLTF.preload(`${process.env.PUBLIC_URL}/Models/can.glb`);

export { Model as Can };
