/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 deur.glb -t 
*/

import * as THREE from "three";
import React, { useEffect, useLayoutEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { FontLoader, GLTF, TextGeometry } from "three-stdlib";
import { Mesh } from "three";
import {
  cursorActiveHandler,
  cursorInactiveHandler,
} from "Components/UserInterface/CursorOverlay";
import { ThreeEvent, useFrame } from "@react-three/fiber";
import { MeshCollider, RigidBody } from "@react-three/rapier";
import swal from "sweetalert";

type GLTFResult = GLTF & {
  nodes: {
    door: THREE.Mesh;
    handle: THREE.Mesh;
    Circle001: THREE.Mesh;
    Circle001_1: THREE.Mesh;
  };
  materials: {
    door: THREE.MeshStandardMaterial;
    handle: THREE.MeshStandardMaterial;
    black: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    `${process.env.PUBLIC_URL}/Models/deur.glb`
  ) as GLTFResult;

  const vicotry = new Audio(`${process.env.PUBLIC_URL}/audio/Victory.wav`);

  // References.
  const handleRef = useRef<Mesh>(null!);
  const doorRef = useRef<THREE.Group>(null);

  // States.
  const [isClicked, setIsClicked] = useState(false);

  // Event Handlers.
  const clickHandler = (event: ThreeEvent<MouseEvent>) => {
    event.stopPropagation();
    setIsClicked(true);
  };

  const animate = useRef(false);
  const setAnimate = () => {
    animate.current = !animate.current;
  };

  useFrame((state, delta) => {
    // Rotate the box around the Y-axis by changing its rotation property
    if (doorRef.current) {
      if (animate.current) {
        doorRef.current.rotation.y -= 1 * delta;
      }
    }
  });

  useEffect(() => {
    if (isClicked) {
      window.localStorage.setItem("song", "STOP");
      window.dispatchEvent(new Event("storage"));
      if (
        window.localStorage.getItem("Drink") === "complete" &&
        window.localStorage.getItem("Listen") === "complete" &&
        window.localStorage.getItem("Read") === "complete" &&
        window.localStorage.getItem("Visit") === "complete"
      ) {
        if (doorRef.current) {
          vicotry.play();
          // doorRef.current.rotation.y = -Math.PI / 2;
          setAnimate();
          setTimeout(() => {
            setAnimate();
          }, 2000);
          swal("You have opened the door!", "success");
          setTimeout(() => {
            window.location.reload();
          }, 5000);
        }
      } else {
        handleRef.current.rotation.x = -Math.PI / 1.2;
        setTimeout(() => {
          handleRef.current.rotation.x = -Math.PI / 1;
          swal("You do not have the key to the door.");
        }, 500);
      }
      setIsClicked(false);
    }
  }, [isClicked]);
  return (
    <group
      {...props}
      dispose={null}
      scale={2}
      onPointerEnter={cursorActiveHandler}
      onPointerLeave={cursorInactiveHandler}
      onPointerOut={cursorInactiveHandler}
      onPointerOver={cursorActiveHandler}
      position={[-7.5, 0, 1]}
      type="fixed"
      ref={doorRef}
    >
      <RigidBody colliders="cuboid" gravityScale={0} type="fixed">
        <mesh
          geometry={nodes.door.geometry}
          material={materials.door}
          position={[0, 1, -0.5]}
          scale={[0.244, 0.187, 0.188]}
        />
        <mesh
          geometry={nodes.handle.geometry}
          material={materials.handle}
          position={[0.017, 0.963, -0.877]}
          rotation={[-Math.PI / 1, 0, -Math.PI / 2]}
          scale={0.043}
          onClick={clickHandler}
          ref={handleRef}
        />
        <group
          position={[0.017, 0.874, -0.877]}
          rotation={[0, 0, -Math.PI / 2]}
          scale={0.043}
        >
          <mesh
            geometry={nodes.Circle001.geometry}
            material={materials.handle}
          />
          <mesh
            geometry={nodes.Circle001_1.geometry}
            material={materials.black}
          />
        </group>
      </RigidBody>
    </group>
  );
}

useGLTF.preload(`${process.env.PUBLIC_URL}/Models/deur.glb`);

export { Model as Door };
