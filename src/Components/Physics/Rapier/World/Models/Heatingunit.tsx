/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 heatingunit.glb -t 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { RigidBody } from "@react-three/rapier";

type GLTFResult = GLTF & {
  nodes: {
    Cube013: THREE.Mesh;
    Cube013_1: THREE.Mesh;
  };
  materials: {
    ["Material.067"]: THREE.MeshStandardMaterial;
    ["Material.016"]: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    `${process.env.PUBLIC_URL}/Models/heatingunit.glb`
  ) as GLTFResult;
  return (
    <group
      {...props}
      dispose={null}
      scale={0.7}
      position={[7.2, 0.5, -4]}
      rotation={[0, -Math.PI / 1, 0]}
    >
      <RigidBody type="fixed">
        <group scale={[0.395, 1.09, 1.519]}>
          <mesh
            geometry={nodes.Cube013.geometry}
            material={materials["Material.067"]}
          />
          <mesh
            geometry={nodes.Cube013_1.geometry}
            material={materials["Material.016"]}
          />
        </group>
      </RigidBody>
    </group>
  );
}

useGLTF.preload(`${process.env.PUBLIC_URL}/Models/heatingunit.glb`);
export { Model as Heating };
