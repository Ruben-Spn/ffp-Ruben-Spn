/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 chair.glb -t 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { RigidBody } from "@react-three/rapier";

type GLTFResult = GLTF & {
  nodes: {
    Computer_Chair: THREE.Mesh;
  };
  materials: {
    ["High Heels 2"]: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    `${process.env.PUBLIC_URL}/Models/chair.glb`
  ) as GLTFResult;
  return (
    <group {...props} dispose={null} scale={0.6} position={[-2.5, 0, 3.5]}>
      <RigidBody type="fixed" colliders="hull">
        <mesh
          geometry={nodes.Computer_Chair.geometry}
          material={materials["High Heels 2"]}
          rotation={[Math.PI / 2, 0, 1]}
          scale={0.01}
        />
      </RigidBody>
    </group>
  );
}

useGLTF.preload(`${process.env.PUBLIC_URL}/Models/chair.glb`);

export { Model as Chair };
