/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 desk.glb -t 
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { RigidBody } from "@react-three/rapier";

type GLTFResult = GLTF & {
  nodes: {
    Circle001: THREE.Mesh;
    Circle001_1: THREE.Mesh;
    Cube002: THREE.Mesh;
    Cube002_1: THREE.Mesh;
    Cube001: THREE.Mesh;
    Cube001_1: THREE.Mesh;
    Cube001_2: THREE.Mesh;
    plank: THREE.Mesh;
    Cube004: THREE.Mesh;
    Cube004_1: THREE.Mesh;
    Cube043: THREE.Mesh;
    Cube043_1: THREE.Mesh;
  };
  materials: {
    ["black.003"]: THREE.MeshStandardMaterial;
    red: THREE.MeshStandardMaterial;
    ["Material.007"]: THREE.MeshStandardMaterial;
    ["pages.001"]: THREE.MeshStandardMaterial;
    black: THREE.MeshStandardMaterial;
    wood: THREE.MeshStandardMaterial;
    ["wood.001"]: THREE.MeshStandardMaterial;
    ["black.002"]: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    `${process.env.PUBLIC_URL}/Models/desk.glb`
  ) as GLTFResult;

  // States.
  const [isClicked, setIsClicked] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [drawer, setDrawer] = useState("");

  const drawerRef = useRef<THREE.Group>(null);
  const recordRef = useRef<THREE.Group>(null);
  const bookRef = useRef<THREE.Group>(null);

  // Event Handlers.
  const clickHandler = () => {
    setIsClicked(true);
  };

  const animate = useRef(false);
  const setAnimate = () => {
    //Toggle animation
    animate.current = !animate.current;
  };

  useFrame((state, delta) => {
    if (drawerRef.current && bookRef.current && recordRef.current) {
      if (animate.current) {
        if (isOpen) {
          // Open drawer
          drawerRef.current.position.x += -4 * delta;
          bookRef.current.position.x += -4 * delta;
          recordRef.current.position.x += -4 * delta;
        } else {
          // Close drawer
          drawerRef.current.position.x += 4 * delta;
          bookRef.current.position.x += 4 * delta;
          recordRef.current.position.x += 4 * delta;
        }
      }
    }
  });

  useEffect(() => {
    if (isClicked) {
      //Start to animate object
      setAnimate();
      setTimeout(() => {
        //Stop to animate object
        setAnimate();
        setIsOpen(!isOpen);
      }, 410);
      setIsClicked(false);
    }
  }, [isClicked]);
  return (
    <group
      {...props}
      dispose={null}
      scale={0.5}
      position={[-1, -0.3, 6.5]}
      rotation={[0, Math.PI / 2, 0]}
    >
      <RigidBody colliders="cuboid" type="fixed">
        <group
          position={[2.359, 2.641, -9.753]}
          rotation={[-0.344, 0, -3.088]}
          scale={0.0009}
          ref={recordRef}
        >
          <mesh
            geometry={nodes.Circle001.geometry}
            material={materials["black.003"]}
          />
          <mesh
            geometry={nodes.Circle001_1.geometry}
            material={materials.red}
          />
        </group>
        <group
          position={[2.458, 2.532, -8.72]}
          rotation={[0, -0.646, -1.597]}
          scale={[0.0001, 0.0006, 0.0005]}
          ref={bookRef}
        >
          <mesh
            geometry={nodes.Cube002.geometry}
            material={materials["Material.007"]}
          />

          <mesh
            geometry={nodes.Cube002_1.geometry}
            material={materials["pages.001"]}
          />
        </group>
        <group position={[2.325, 3.609, -4.95]} scale={[1.324, 0.104, 4.167]}>
          <mesh geometry={nodes.Cube001.geometry} material={materials.black} />
          <mesh geometry={nodes.Cube001_1.geometry} material={materials.wood} />
          <mesh geometry={nodes.Cube001_2.geometry} material={materials.wood} />
        </group>

        {/* drawer */}
        <group
          position={[2.436, 2.768, -9.192]}
          scale={[0.923, 0.528, 1.298]}
          onClick={() => {
            clickHandler();
            setDrawer("drawer1");
          }}
          ref={drawerRef}
        >
          <mesh geometry={nodes.Cube004.geometry} material={materials.wood} />
          <mesh
            geometry={nodes.Cube004_1.geometry}
            material={materials.black}
          />
        </group>
        <group position={[2.411, 1.701, -9.192]} scale={[0.923, 0.528, 1.298]}>
          <mesh
            geometry={nodes.Cube043.geometry}
            material={materials["wood.001"]}
          />
          <mesh
            geometry={nodes.Cube043_1.geometry}
            material={materials["black.002"]}
          />
        </group>
      </RigidBody>
    </group>
  );
}

useGLTF.preload(`${process.env.PUBLIC_URL}/Models/desk.glb`);

export { Model as Desk };
