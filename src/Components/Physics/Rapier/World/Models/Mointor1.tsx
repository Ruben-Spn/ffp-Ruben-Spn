/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 mointor1.glb -t 
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import {
  cursorActiveHandler,
  cursorInactiveHandler,
} from "Components/UserInterface/CursorOverlay";

type GLTFResult = GLTF & {
  nodes: {
    Cube006: THREE.Mesh;
    Cube006_1: THREE.Mesh;
    Cube006_2: THREE.Mesh;
    Cube006_3: THREE.Mesh;
  };
  materials: {
    ["PC BLACK"]: THREE.MeshStandardMaterial;
    ["PC buttons black"]: THREE.MeshStandardMaterial;
    ["PC buttons white"]: THREE.MeshStandardMaterial;
    ["wallpaper-1"]: THREE.MeshStandardMaterial;
  };
};

type ActionName = "PC";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    `${process.env.PUBLIC_URL}/Models/mointor1.glb`
  ) as GLTFResult;

  const [isOn, setIsOn] = React.useState("");

  window.addEventListener("storage", () => {
    setIsOn(window.localStorage.getItem("Pc") || "");
  });

  return (
    <group
      {...props}
      dispose={null}
      onPointerEnter={cursorActiveHandler}
      onPointerLeave={cursorInactiveHandler}
      onPointerOut={cursorInactiveHandler}
      onPointerOver={cursorActiveHandler}
      onClick={() => {
        if (isOn === "on") {
          window.localStorage.setItem("Visit", "complete");
          window.dispatchEvent(new Event("storage"));
          window.open("https://rubenspaan.com");
        }
      }}
    >
      <group name="Scene">
        <group
          name="PC"
          position={[-2.5, 1.9, 5.5]}
          rotation={[0, Math.PI / 1.7, 0]}
          scale={2.5}
        >
          <mesh
            name="Cube006"
            geometry={nodes.Cube006.geometry}
            material={materials["PC BLACK"]}
          />
          <mesh
            name="Cube006_1"
            geometry={nodes.Cube006_1.geometry}
            material={materials["PC buttons black"]}
          />
          <mesh
            name="Cube006_2"
            geometry={nodes.Cube006_2.geometry}
            material={materials["PC buttons white"]}
          />
          <mesh
            name="Cube006_3"
            geometry={nodes.Cube006_3.geometry}
            material={materials[isOn === "on" ? "wallpaper-1" : "PC BLACK"]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(`${process.env.PUBLIC_URL}/Models/mointor1.glb`);

export { Model as Monitor1 };
