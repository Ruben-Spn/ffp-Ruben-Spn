/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 window.glb -t 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Plane_1: THREE.Mesh;
    Plane_2: THREE.Mesh;
  };
  materials: {
    wallpaper: THREE.MeshStandardMaterial;
    frame: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    `${process.env.PUBLIC_URL}/Models/window.glb`
  ) as GLTFResult;
  return (
    <group
      {...props}
      dispose={null}
      scale={0.5}
      position={[7.48, 3, 0]}
      rotation={[0, -Math.PI / 1, 0]}
    >
      <group rotation={[0, 0, -Math.PI / 2]}>
        <mesh
          geometry={nodes.Plane_1.geometry}
          material={materials.wallpaper}
        />
        <mesh geometry={nodes.Plane_2.geometry} material={materials.frame} />
      </group>
    </group>
  );
}

useGLTF.preload(`${process.env.PUBLIC_URL}/Models/window.glb`);

export { Model as WindowRoom };
